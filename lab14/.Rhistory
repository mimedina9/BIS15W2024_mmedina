knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
#install.packages("shiny")
library(shiny)
library("tidyverse")
library("palmerpenguins")
runApp("plot_iris.R")
library(shiny)
ui <- fluidPage(
)
server <- function(input, output, session) {
}
shinyApp(ui, server)
names(penguins)
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"), selected = "bill_length_mm") #selectInput refers to drop down menu
)
server <- function(input, output) {
}
shinyApp(ui, server)
penguins %>%
ggplot(aes(x=bill_length_mm, y=body_mass_g))+
geom_point()
ui <- fluidPage(
selectInput("x", "Select X Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
selectInput("y", "Select Y Variable", choices = c("bill_length_mm", "bill_depth_mm", "flipper_length_mm", "body_mass_g"),
selected = "bill_length_mm"),
plotOutput("plot", width="500px", height="400px") #providing the size of the visual that we are producing
)
server <- function(input, output) {
output$plot <- renderPlot({
ggplot(data=penguins, aes_string(x=input$x, y=input$y, color="species"))+
geom_point()+
theme_light(base_size=18)
})
}
shinyApp(ui, server)
homerange <- read_csv("data/Tamburelloetal_HomeRangeDatabase.csv")
names(homerange)
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=trophic.guild))+
geom_bar(position="dodge")
homerange %>%
ggplot(aes(x=locomotion, fill=thermoregulation))+
geom_bar(position="dodge")
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices = c("trophic.guild", "thermoregulation"
selected = "trophic.guild"),
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"
selected = "trophic.guild"),
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"
selected = "trophic.guild"),
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation")
selected = "trophic.guild"),
library(shiny)
ui <- fluidPage(
radioButtons("x", "Select Fill Variable", choices=c("trophic.guild", "thermoregulation"),
selected = "trophic.guild"),
plotOutput("plot")
)
server <- function(input, output, session) {
output$plot <- renderPlot({  #make a plot
ggplot(data=homerange, aes_string(x="locomotion", fill=input$x))+
geom_bar(position="dodge", alpha=0.8, color="black")+
labs(x=NULL, fill="Fill Variable")
})
}
shinyApp(ui, server)
#install.packages("shinydashboard")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
runApp('homerange_app.R')
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(tidyverse)
library(shiny)
library(shinydashboard)
require(janitor)
library(palmerpenguins)
runApp('homerange_app.R')
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- read_csv("data/UC_admit.csv")
str(UC_admit)
names(UC_admit)
miss_var_summary(UC_admit)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
UC_admit <- read_csv("data/UC_admit.csv")
str(UC_admit)
names(UC_admit)
miss_var_summary(UC_admit)
naniar::miss_var_summary(UC_admit)
View(UC_admit)
UC_admit %>%
ggplot(aes(x=Ethnicity))
UC_admit %>%
ggplot(aes(x=Ethnicity))+
geom_bar
UC_admit %>%
ggplot(aes(x=Ethnicity))+
geom_bar()
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
UC_admit %>%
ggplot(aes(x=ethnicity))+
geom_bar()
UC_admit %>%
ggplot(aes(x=Ethnicity))+
geom_bar()
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
View(ui)
View(UC_admit)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFr))+
geom_col()
})}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFr))+
geom_col()
})}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$Campus)), hr()),
box(width=3,
selectInput("y", "Ethnicity", unique(UC_admit$Ethnicity)), hr()),
box(width=3,
selectInput("z", "Year", unique(UC_admit$Academic_Yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(Academic_Yr) %>%
ggplot(aes(x=Ethnicity, y=FilteredCountFr))+
geom_col()
})}
shinyApp(ui, server)
UC_admit <- read_csv("data/UC_admit.csv")%>% clean_names()
UC_admit <- read_csv("data/UC_admit.csv") %>% clean_names()
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
library(janitor)
UC_admit <- read_csv("data/UC_admit.csv") %>% clean_names()
str(UC_admit)
names(UC_admit)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
ggplot(aes(x=ethnicity))+
geom_bar()
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Ethnicity", unique(UC_admit$Ethnicity)), hr()),
box(width=3,
selectInput("z", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Ethnicity", unique(UC_admit$ethnicity)), hr()),
box(width=3,
selectInput("z", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
knit_with_parameters("~/Desktop/BIS15W2024_mmedina/lab14/hw13.Rmd")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(shiny)
library(shinydashboard)
library(naniar)
library(janitor)
UC_admit <- read_csv("data/UC_admit.csv") %>% clean_names()
str(UC_admit)
names(UC_admit)
naniar::miss_var_summary(UC_admit)
UC_admit %>%
ggplot(aes(x=ethnicity))+
geom_bar()
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Ethnicity", unique(UC_admit$ethnicity)), hr()),
box(width=3,
selectInput("z", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
**1. Use the function(s) of your choice to get an idea of the overall structure of the data frame, including its dimensions, column names, variable classes, etc. As part of this, determine if there are NA's and how they are treated.**
## Instructions
Answer the following questions and complete the exercises in RMarkdown. Please embed all of your code and push your final work to your repository. Your final lab report should be organized, clean, and run free from errors. Remember, you must remove the `#` for the included code chunks to run. Be sure to add your name to the author header above. For any included plots, make sure they are clearly labeled. You are free to use any plot type that you feel best communicates the results of your analysis.
**1. Use the function(s) of your choice to get an idea of the overall structure of the data frame, including its dimensions, column names, variable classes, etc. As part of this, determine if there are NAs and how they are treated.**
```{r}
```
runApp('Homework13.R')
library(shiny)
ui <- dashboardPage(
dashboardHeader(title="UC Admissions"),
dashboardSidebar(disable = T),
dashboardBody(
fluidRow(
box(width=3,
selectInput("x", "UC Campus", unique(UC_admit$campus)), hr()),
box(width=3,
selectInput("y", "Year", unique(UC_admit$academic_yr)), hr()),
box(width = 8,
plotOutput("plot", width = "600px", height = "400px")))))
server <- function(input, output, session) {
session$onSessionEnded(stopApp)
output$plot <- renderPlot({
UC_admit %>%
filter(category=="Admits") %>%
group_by(academic_yr) %>%
ggplot(aes(x=ethnicity, y=filtered_count_fr))+
geom_col()
})}
shinyApp(ui, server)
